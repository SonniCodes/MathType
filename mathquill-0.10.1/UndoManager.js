const TAB_KEYCODE = 9, ENTER_KEYCODE = 13, SHIFT_KEYCODE = 16, CTRL_KEYCODE = 17, ALT_KEYCODE = 18, CAPSLOCK_KEYCODE = 20, ESCAPE_KEYCODE = 27, PAGEUP_KEYCODE = 33, PAGEDOWN_KEYCODE = 34, END_KEYCODE = 35, HOME_KEYCODE = 36, LEFTARROW_KEYCODE = 37, UPARROW_KEYCODE = 38, RIGHTARROW_KEYCODE = 39, DOWNARROW_KEYCODE = 40, V_KEYCODE = 86, Y_KEYCODE = 89, Z_KEYCODE = 90, ALTGR_KEYCODE = 225, unaffectingKeys = [TAB_KEYCODE, ENTER_KEYCODE, SHIFT_KEYCODE, CTRL_KEYCODE, ALT_KEYCODE, CAPSLOCK_KEYCODE, ESCAPE_KEYCODE, LEFTARROW_KEYCODE, PAGEUP_KEYCODE, PAGEDOWN_KEYCODE, END_KEYCODE, HOME_KEYCODE, LEFTARROW_KEYCODE, UPARROW_KEYCODE, RIGHTARROW_KEYCODE, DOWNARROW_KEYCODE, ALTGR_KEYCODE]; function UndoRedoManager(t, s) { this.mathField = t, this.contentEl = s, this.typedHistory = [this.mathField.latex()], this.ctrlIsDown = !1, this.YIsDown = !1, this.ZIsDown = !1, this.currentState = 0, this.buffSize = 50, this.rearrangeTypedArray = () => { var t; this.typedHistory.length > this.buffSize && (t = this.typedHistory.length - this.buffSize, this.currentState = this.currentState - t, this.typedHistory = this.typedHistory.slice(-1 * this.buffSize)) }, this.isKeyIsUnaffecting = t => unaffectingKeys.includes(t), this.checkIfSpecialKeysAreUpAndSetStates = t => { switch (t) { case CTRL_KEYCODE: this.ctrlIsDown = !1; break; case Y_KEYCODE: this.YIsDown = !1; break; case Z_KEYCODE: this.ZIsDown = !1 } }, this.checkIfSpecialKeysAreDownAndSetStates = t => { switch (t) { case CTRL_KEYCODE: this.ctrlIsDown = !0; break; case Y_KEYCODE: this.YIsDown = !0; break; case Z_KEYCODE: this.ZIsDown = !0 } }, this.saveState = () => { this.currentState !== this.typedHistory.length - 1 && (this.typedHistory = this.typedHistory.slice(0, this.currentState + 1)), this.typedHistory.push(this.mathField.latex()), this.rearrangeTypedArray(), this.currentState++ }, this.undo = () => { 0 !== this.currentState && (this.currentState--, this.mathField.latex(this.typedHistory[this.currentState])) }, this.redo = () => { this.currentState < this.typedHistory.length - 1 && (this.currentState++, this.mathField.latex(this.typedHistory[this.currentState])) }, this.contentEl.on("keyup", t => { this.checkIfSpecialKeysAreUpAndSetStates(t.which), !1 === this.isKeyIsUnaffecting(t.which) && (!1 === this.ctrlIsDown || this.ctrlIsDown && t.which === V_KEYCODE) && this.saveState() }), this.contentEl.on("keydown", t => { this.checkIfSpecialKeysAreDownAndSetStates(t.which), this.ctrlIsDown && this.ZIsDown && this.undo(), this.ctrlIsDown && this.YIsDown && this.redo() }) }